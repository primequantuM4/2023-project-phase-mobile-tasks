// Mocks generated by Mockito 5.4.2 from annotations
// in todo/test/features/todo_list/presentation/bloc/todo_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo/core/error/failures.dart' as _i6;
import 'package:todo/core/use_case/use_case.dart' as _i8;
import 'package:todo/core/utils/input_converter.dart' as _i11;
import 'package:todo/features/todo_list/domain/entity/tasks.dart' as _i7;
import 'package:todo/features/todo_list/domain/repositories/todo_list_repository.dart'
    as _i2;
import 'package:todo/features/todo_list/domain/use_case/create_task.dart'
    as _i10;
import 'package:todo/features/todo_list/domain/use_case/view_all_tasks.dart'
    as _i4;
import 'package:todo/features/todo_list/domain/use_case/view_specific_task.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoListRepository_0 extends _i1.SmartFake
    implements _i2.TodoListRepository {
  _FakeTodoListRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ViewAllTasks].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewAllTasks extends _i1.Mock implements _i4.ViewAllTasks {
  @override
  _i2.TodoListRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTodoListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTodoListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TodoListRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Tasks>>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.Tasks>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.Tasks>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Tasks>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Tasks>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Tasks>>>);
}

/// A class which mocks [ViewSpecificTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewSpecificTask extends _i1.Mock implements _i9.ViewSpecificTask {
  @override
  _i2.TodoListRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTodoListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTodoListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TodoListRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Tasks>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Tasks>>.value(
            _FakeEither_1<_i6.Failure, _i7.Tasks>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Tasks>>.value(
                _FakeEither_1<_i6.Failure, _i7.Tasks>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Tasks>>);
}

/// A class which mocks [CreateTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTask extends _i1.Mock implements _i10.CreateTask {
  @override
  _i2.TodoListRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTodoListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTodoListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TodoListRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Tasks>> call(_i10.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Tasks>>.value(
            _FakeEither_1<_i6.Failure, _i7.Tasks>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Tasks>>.value(
                _FakeEither_1<_i6.Failure, _i7.Tasks>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Tasks>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i11.InputConverter {
  @override
  _i3.Either<_i6.Failure, DateTime> stringToDateTime(String? str) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToDateTime,
          [str],
        ),
        returnValue: _FakeEither_1<_i6.Failure, DateTime>(
          this,
          Invocation.method(
            #stringToDateTime,
            [str],
          ),
        ),
        returnValueForMissingStub: _FakeEither_1<_i6.Failure, DateTime>(
          this,
          Invocation.method(
            #stringToDateTime,
            [str],
          ),
        ),
      ) as _i3.Either<_i6.Failure, DateTime>);
}
